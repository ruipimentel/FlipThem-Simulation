@startuml "class-diagram"

class Game {
  + {field} current_time: float
  + {field} time_limit: float
  + {field} players: List[Player]
  + {field} __system
  + {field} game_properties: Dict
  + __init__(players: Tuple[Player, ...], system: System, game_properties: Dict = base_properties)
  + play(): None
  + get_system(): System
  + get_time_limit(): float
  + reset(): None
  + print_individual_server_summary(): None
  + print_full_game_summary(): None
}

class System {
  + {field} __servers: List[Server]
  + {field} __player_benefits: Dict[Player, List[Tuple[float, float]]]
  + {field} player_ownership_count: Dict[Player, int]
  + {field} players: Tuple[Player, ...]
  + {field} player_ownership: Dict[Player, bool]
  + {field} game_properties: (Dict | None)
  + {field} number_of_servers: int
  + __init__(number_of_servers: int)
  + initialise_system(players: Tuple[Player, ...], game_properties: (Dict | None) = None): None
  + get_all_servers(): List[Server]
  + get_server_by_name(name): (Server | False)
  + get_number_of_servers(): int
  + change_server_control(server: Server, player: Player, time: float): None
  + get_player_server_benefits(player: Player, server: Server): float
  + get_system_gain_times(player: Player, time: (float | None) = None): List[Tuple[float, float]]
  + get_all_player_benefit_times(): Dict[Player, List[Tuple[float, float]]]
  + get_system_reward(player: Player, time: (float | None) = None): float
  + get_players(): Tuple[Player, ...]
  + reset_system(): None
  + __get_latest_time(): float
}

namespace strategies {

  class Player {
    + {field} __name: str
    + {field} player_properties: Dict
    + {field} server_strategies: Dict[Server, ServerStrategy]
    + {field} strategies: (Tuple[ServerStrategy, ...] | None)
    + {field} planned_moves: Dict[Server, float]
    + __init__(name: str, strategies: (Tuple[ServerStrategy, ...] | ServerStrategy | None) = None, player_properties: Dict = base_properties)
    + initialise_strategies(system: System): None
    + check_for_move_times(game_properties: Dict, system: System, current_time: float): Dict[Server, float]
    + reset(): None
    + get_name(): str
    + set_name(name): None
    + get_player_properties(): Dict
    + update_strategy_rate(strategy_number, rate): None
    + update_strategy(strategy_number, strategy): None
    + get_strategies(): (Tuple[ServerStrategy, ...] | None)
    + get_strategy_rate(server_number: int): float
    + get_strategy(server_number: int): ServerStrategy
    + set_strategies(strategies): None
  }

}

Game --> System
Game --> strategies.Player
System <--> strategies.Player

@enduml

