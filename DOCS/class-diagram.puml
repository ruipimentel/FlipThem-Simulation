@startuml "class-diagram"

class Game {
  + current_time: float
  + time_limit: float
  + players: List[Player]
  + __system
  + game_properties: Dict
  + __init__(players: Tuple[Player, ...], system: System, game_properties: Dict = base_properties)
  + play(): None
  + get_system(): System
  + get_time_limit(): float
  + reset(): None
  + print_individual_server_summary(): None
  + print_full_game_summary(): None
}

class System {
  + __servers: List[Server]
  + __player_benefits: Dict[Player, List[Tuple[float, float]]]
  + player_ownership_count: Dict[Player, int]
  + players: Tuple[Player, ...]
  + player_ownership: Dict[Player, bool]
  + game_properties: (Dict | None)
  + number_of_servers: int
  + __init__(number_of_servers: int)
  + initialise_system(players: Tuple[Player, ...], game_properties: (Dict | None) = None): None
  + get_all_servers(): List[Server]
  + get_server_by_name(name): (Server | False)
  + get_number_of_servers(): int
  + change_server_control(server: Server, player: Player, time: float): None
  + get_player_server_benefits(player: Player, server: Server): float
  + get_system_gain_times(player: Player, time: (float | None) = None): List[Tuple[float, float]]
  + get_all_player_benefit_times(): Dict[Player, List[Tuple[float, float]]]
  + get_system_reward(player: Player, time: (float | None) = None): float
  + get_players(): Tuple[Player, ...]
  + reset_system(): None
  + __get_latest_time(): float
}

Game --> System

@enduml

