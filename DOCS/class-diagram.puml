@startuml "class-diagram"

class Tournament {
  + {field} attacker_strategies: Tuple[Player, ...]
  + {field} defender_strategies: Tuple[Player, ...]
  + {field} tournament_properties: Dict
  + {field} system: System
  + {field} defender_results: Dict[Player, Dict[Player, List[Tuple[float, float]]]]
  + {field} attacker_results: Dict[Player, Dict[Player, List[Tuple[float, float]]]]
  + {field} mean_defender_results: Dict[Player, Dict[Player, Tuple[float, float]]]
  + {field} mean_attacker_results: Dict[Player, Dict[Player, Tuple[float, float]]]
  + __init__(defender_strategies: (Tuple[Player, ...] | None) = None, attacker_strategies: (Tuple[Player, ...] | None) = None, tournament_properties: Dict = None)
  + play_games(players: Tuple[Player, Player]): Tuple[List[Tuple[float, float]], List[Tuple[float, float]]]
  + play_tournament(): None
  + get_mean_defense(): Dict[Player, float]
  + get_mean_attack(): Dict[Player, float]
}

class Game {
  + {field} current_time: float
  + {field} time_limit: float
  + {field} players: List[Player]
  + {field} __system
  + {field} game_properties: Dict
  + __init__(players: Tuple[Player, ...], system: System, game_properties: Dict = base_properties)
  + play(): None
  + get_system(): System
  + get_time_limit(): float
  + reset(): None
  + print_individual_server_summary(): None
  + print_full_game_summary(): None
}

class System {
  + {field} __servers: List[Server]
  + {field} __player_benefits: Dict[Player, List[Tuple[float, float]]]
  + {field} player_ownership_count: Dict[Player, int]
  + {field} players: Tuple[Player, ...]
  + {field} player_ownership: Dict[Player, bool]
  + {field} game_properties: (Dict | None)
  + {field} number_of_servers: int
  + __init__(number_of_servers: int)
  + initialise_system(players: Tuple[Player, ...], game_properties: (Dict | None) = None): None
  + get_all_servers(): List[Server]
  + get_server_by_name(name): (Server | False)
  + get_number_of_servers(): int
  + change_server_control(server: Server, player: Player, time: float): None
  + get_player_server_benefits(player: Player, server: Server): float
  + get_system_gain_times(player: Player, time: (float | None) = None): List[Tuple[float, float]]
  + get_all_player_benefit_times(): Dict[Player, List[Tuple[float, float]]]
  + get_system_reward(player: Player, time: (float | None) = None): float
  + get_players(): Tuple[Player, ...]
  + reset_system(): None
  + __get_latest_time(): float
}

class Server {
  + {field} __name: str
  + {field} __current_controller: (Player | None)
  + {field} __player_costs: Dict[Player, float]
  + {field} __player_history: Dict[Player, List[float]]
  + {field} __player_benefits: Dict[Player, Tuple[float, float]]
  + __init__(name: str)
  + initialise_server(players: Tuple[Player, ...], game_properties: (Dict | None) = None, server_number: int = 0): None
  + change_control(player: Player, current_time: float): None
  + __update_player_benefits(player: Player, last_move: float, current_time: float): None
  + get_current_controller(): (Player | None)
  + __add_history(player: Player, current_time: float): None
  + get_name(): str
  + get_history(player: Player, time: (float | None) = None): List[float]
  + get_player_benefit_times(player: Player): Tuple[float, float]
  + get_all_player_benefit_times(): Dict[Player, Tuple[float, float]]
  + get_player_costs(player: Player): float
  + get_benefit_value(player: Player, time: float): float
  + get_players(): List[Player]
  + get_number_of_moves(player: Player, time: (float | None) = None): int
  + get_reward_for_player(player: Player, time: float): float
  + reset_server(): None
}

namespace genetic_algorithms {

  class GeneticAlgorithm {
    + {field} ga_properties: (Dict | None)
    + {field} defender_ga_properties: Dict
    + {field} defenders: Tuple[Player, ...]
    + {field} attacker_ga_properties: Dict
    + {field} attackers: Tuple[Player, ...]
    + {field} number_of_servers: int
    + {field} tournament_properties: (Dict | None)
    + {field} game_properties: (Dict | None)
    + {field} defender_population: Dict[int, List[float] | NDArray[float]]
    + {field} attacker_population: Dict[int, List[float] | NDArray[float]]
    + {field} defender_benefit: (List[float] | NDArray[float])
    + {field} attacker_benefit: (List[float] | NDArray[float])
    + {field} def_keep_number: int
    + {field} att_keep_number: int
    + {field} def_strategy_count: Dict[int, Dict[ServerStrategy, List[int]]]
    + {field} att_strategy_count: Dict[int, Dict[ServerStrategy, List[int]]]
    + {field} mutation_probability: float
    + __init__(defenders: (Dict | Tuple[Player, ...] | None) = None, attackers: (Dict | Tuple[Player, ...] | None) = None, ga_properties: (Dict | None) = None, tournament_properties: (Dict | None) = None, game_properties: (Dict | None) = None)
    + generate_players(player_ga_properties: Dict): Tuple[Player, ...]
    + __initiate(): None
    + run(number_of_rounds: int, file_write: int = 0): None
    + create_new_generation(sorted_results: List[Tuple[Player, float]], keep_number: int, player_ga_properties: Dict, round: int): None
    + define_parents(keep_number: int, results: List[Tuple[Player, float]]): List[Player]
    + plot(start_time: float = 0, end_time: float = 0, share_axes: bool = False): None
    + plot_variance_stats(start_time: float = 0, end_time: float = 0): None
    + plot_strategy_count(start_time: float = 0, end_time: float = 0): None
    + write_to_file(file_number: str = "-1"): None
    + create_directory(directory: str): None
    + write_info_files(): None
    + read_from_file(file_number: (str | None) = None): None
  }

}

namespace strategies {

  namespace server_strategies {

    class Periodic {
      + {field} rate: float
      + __init__(rate: float)
      + get_rate(): float
      + age_density(z: float, rate: float): float
      + age_distribution(z: float, rate: float): float
    }

    class Exponential {
      + {field} rate: float
      + __init__(rate: float)
      + get_rate(): float
      + age_density(z: float, rate: float): float
      + age_distribution(z: float, rate: float): float
    }

    class ServerStrategy {
      + get_next_move_time(information: Dict): float
      + __str__(): str
    }

    Periodic -u-|> ServerStrategy
    Exponential -u-|> ServerStrategy

  }

  class Player {
    + {field} __name: str
    + {field} player_properties: Dict
    + {field} server_strategies: Dict[Server, ServerStrategy]
    + {field} strategies: (Tuple[ServerStrategy, ...] | None)
    + {field} planned_moves: Dict[Server, float]
    + __init__(name: str, strategies: (Tuple[ServerStrategy, ...] | ServerStrategy | None) = None, player_properties: Dict = base_properties)
    + initialise_strategies(system: System): None
    + check_for_move_times(game_properties: Dict, system: System, current_time: float): Dict[Server, float]
    + reset(): None
    + get_name(): str
    + set_name(name): None
    + get_player_properties(): Dict
    + update_strategy_rate(strategy_number, rate): None
    + update_strategy(strategy_number, strategy): None
    + get_strategies(): (Tuple[ServerStrategy, ...] | None)
    + get_strategy_rate(server_number: int): float
    + get_strategy(server_number: int): ServerStrategy
    + set_strategies(strategies): None
  }

}

genetic_algorithms.GeneticAlgorithm --> Tournament
genetic_algorithms.GeneticAlgorithm --> strategies.Player
genetic_algorithms.GeneticAlgorithm --> strategies.server_strategies.ServerStrategy
Tournament --> Game
Tournament --> System
Tournament --> strategies.Player
Game --> System
Game --> strategies.Player
System <--> strategies.Player
System --> Server
Server <--> strategies.Player
strategies.Player --> strategies.server_strategies.ServerStrategy

@enduml

