@startuml "overview"

title GeneticAlgorithm usage overview

start

#lightblue:ga = GeneticAlgorithm(
  defenders=defender_ga_properties,
  attackers=attacker_ga_properties,
  ga_properties=ga_properties,
  tournament_properties=tournament_properties,
)]

#lightblue:ga.run(1000, 50)]

#lightblue:ga.plot()]

stop

@enduml

@startuml "__init__"
!pragma useVerticalIf on

title GeneticAlgorithm.~__init__

start
floating note right: \
defenders: (Dict | Tuple[Player, ...] | None) = None, \n\
attackers: (Dict | Tuple[Player, ...] | None) = None, \n\
ga_properties: (Dict | None) = None, \n\
tournament_properties: (Dict | None) = None, \n\
game_properties: (Dict | None) = None

:self.ga_properties = ga_properties]

if (defenders is None) then (True)
  :print("Blank genetic_algorithms \n created (for now)");
else (False)
  #lightblue:self.defender_ga_properties, self.defenders = \n self.initialize_players(defenders, attackers)]
  #lightblue:self.attacker_ga_properties, self.attackers = \n self.initialize_players(attackers, attackers)]
  if (len(self.attacker_ga_properties['move_costs']) == \n len(self.defender_ga_properties['move_costs'])) then (True)
    :self.number_of_servers = \n len(self.attacker_ga_properties['move_costs'])]
  else (False)
    :raise ValueError("Number of move costs \n for defender and attacker not equal");
    kill
  endif
endif

:
self.tournament_properties = tournament_properties
self.game_properties = game_properties
self.defender_population = Dict()
self.attacker_population = Dict()
self.defender_benefit = List()
self.attacker_benefit = List()
self.def_keep_number = 8
self.att_keep_number = 8
self.def_strategy_count = Dict()
self.att_strategy_count = Dict()
self.mutation_probability = 0
]

stop;

@enduml

@startuml "initialize_players"
!pragma useVerticalIf on

title GeneticAlgorithm.initialize_players

start
floating note right: \
<color:green>players</color>: (Dict | Tuple[Player, ...]), \n\
<color:purple>attackers</color>: (Dict | Tuple[Player, ...]), \n\
**returns** Tuple[Dict, Tuple[Player, ...]]

if (type(<color:green>players</color>)) then (Dict)
  #lightblue:return (
    <color:green>players</color>,
    self.generate_players(<color:green>players</color>),
  );
  stop
else (Tuple[Player, ...])
  :strategies = set()]
  while (for s in <color:green>players</color>[0].get_strategies())
    :strategies.add(type(s));
  endwhile (end)
  :return (
    {
      "move_costs": <color:green>players</color>[0].get_player_properties()["move_costs"],
      "strategy_classes": tuple(strategies),
      "number_of_players": len(<color:purple>attackers</color>),
    },
    <color:green>players</color>,
  );
  stop
endif

@enduml

@startuml "generate_players"
!pragma useVerticalIf on

title GeneticAlgorithm.generate_players

start
floating note right: \
player_ga_properties: Dict, \n\
**returns** Tuple[Player, ...]

:
<color:green>player_list</color> = List()
number_of_players = player_ga_properties.get('number_of_players')
]
while (for i in range(0, number_of_players))
  :<color:salmon>strategy_list</color> = List()]
  :
  number_of_strategies = len(player_ga_properties.get('strategy_classes'))
  number_of_servers = len(player_ga_properties.get('move_costs'))
  ]
  while (for server in range(0, number_of_servers))
    :<color:salmon>strategy_list</color>.append(
      player_ga_properties.get('strategy_classes')[
        np.random.randint(0, number_of_strategies)
      ](np.random.uniform(
        self.ga_properties['lower_bound'],
        self.ga_properties['upper_bound'],
      ))
    );
  endwhile (end)

  :<color:purple>player_properties</color> = {"move_costs": player_ga_properties['move_costs']} ]

  :<color:green>player_list</color>.append(Player(
    player_ga_properties.get('name') + str(i),
    player_properties=copy(<color:purple>player_properties</color>),
    strategies=tuple(<color:salmon>strategy_list</color>)
  ));
endwhile (end)

:return tuple(<color:green>player_list</color>);

stop

@enduml

@startuml "run"
!pragma useVerticalIf on

title GeneticAlgorithm.run

start
floating note right: \
number_of_rounds: int, \n\
file_write: int = 0, \n\

if (len(self.defender_benefit) == 0) then (True)
  #lightblue:self.__initiate() ;
  :round_start = 0 ]
else (False)
  :round_start = len(self.defender_benefit) ]
endif

while (for i in range(round_start, number_of_rounds + round_start))

  :t = Tournament(
    defender_strategies=self.defenders,
    attacker_strategies=self.attackers,
    tournament_properties=self.tournament_properties,
  ) ]

  #lightblue:t.play_tournament();

  :
  defender_results = list(t.get_mean_defense().items())
  attacker_results = list(t.get_mean_attack().items())
  sorted_defender_results = sorted(
    defender_results,
    key=lambda tup: tup[1],
    reverse=True,
  )
  sorted_attacker_results = sorted(
    attacker_results,
    key=lambda tup: tup[1],
    reverse=True,
  )
  ]

  if (len(self.defenders) > 1 and self.ga_properties['defender_update']) then (True)
    #lightblue:self.create_new_generation(
      sorted_defender_results,
      self.def_keep_number,
      self.defender_ga_properties,
      i,
    );
  endif

  if (len(self.attackers) > 1 and self.ga_properties['attacker_update']) then (True)
    #lightblue:self.create_new_generation(
      sorted_attacker_results,
      self.att_keep_number,
      self.attacker_ga_properties,
      i,
    );
  endif

endwhile (end)

stop

@enduml
